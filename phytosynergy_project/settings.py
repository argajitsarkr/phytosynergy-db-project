import os
import dj_database_url

"""
Django settings for phytosynergy_project project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""


from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ==============================================================================
# CORE PRODUCTION SETTINGS
# ==============================================================================

# Get the secret key from an environment variable.
# For local dev, we provide a default fallback value.
SECRET_KEY = os.environ.get(
    'SECRET_KEY', 
    'django-insecure-fallback-key-for-local-development-only'
)

# DEBUG is False in production, but True if we're running locally.
# We check for the RAILWAY_STATIC_URL variable, which only exists on Railway.
DEBUG = 'RAILWAY_STATIC_URL' not in os.environ

# Define the allowed hosts.
ALLOWED_HOSTS = [
    '127.0.0.1', # For local development
]

# Get the production hostname from Railway's environment variables.
RAILWAY_HOSTNAME = os.environ.get('RAILWAY_STATIC_URL')
if RAILWAY_HOSTNAME:
    # The URL from Railway doesn't have https://, so we remove it.
    ALLOWED_HOSTS.append(RAILWAY_HOSTNAME.replace('https://', ''))


# DATABASE CONFIGURATION (The most important part)

# If DATABASE_URL is in the environment, use it (for Railway).
# Otherwise, use the local PostgreSQL database (for your laptop).
if 'DATABASE_URL' in os.environ:
    DATABASES = {
        'default': dj_database_url.config(conn_max_age=600, ssl_require=False)
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'phytosynergy_db',
            'USER': 'postgres',
            'PASSWORD': 'YOUR_LOCAL_PASSWORD', # <-- IMPORTANT: Put your local password here
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }

# CSRF and Trusted Origins for Production
# This tells Django to trust requests from your production site.
if RAILWAY_HOSTNAME:
    CSRF_TRUSTED_ORIGINS = ['https://' + RAILWAY_HOSTNAME]

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / 'staticfiles' # This is the new line to add

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# PRODUCTION DATABASE CONFIGURATION
# This section makes your app production-ready.

import dj_database_url
import os

# This line checks if the DATABASE_URL environment variable (provided by Railway) exists.
# If it does, it updates the DATABASES setting to use the cloud database.
# Otherwise, it leaves your local database settings untouched for local development.
if 'DATABASE_URL' in os.environ:
    DATABASES['default'] = dj_database_url.config(conn_max_age=600, ssl_require=False)

